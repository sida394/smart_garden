#include <stdio.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/adc.h"
#include "esp_adc_cal.h"

#define DEFAULT_VREF    1100        // Default ADC reference voltage (mV)
#define NO_OF_SAMPLES   64          // Number of samples for ADC averaging

esp_adc_cal_characteristics_t *adc_chars; // Declare adc_chars variable

void initialize_adc() {
    // Configure ADC characteristics
    adc1_config_width(ADC_WIDTH_BIT_12);
    adc1_config_channel_atten(ADC1_CHANNEL_0, ADC_ATTEN_DB_11);

    // Initialize ADC characteristics
    adc_chars = calloc(1, sizeof(esp_adc_cal_characteristics_t)); // Allocate memory for adc_chars
    esp_adc_cal_characterize(ADC_UNIT_1, ADC_ATTEN_DB_11, ADC_WIDTH_BIT_12, DEFAULT_VREF, adc_chars); // Initialize adc_chars
}


void read_analog_voltage() {
    uint32_t adc_reading = 0;
    // Perform ADC sampling
    for (int i = 0; i < NO_OF_SAMPLES; i++) {
        adc_reading += adc1_get_raw(ADC1_CHANNEL_0);
    }
    adc_reading /= NO_OF_SAMPLES; // Calculate average ADC reading

    // Convert ADC reading to voltage
    uint32_t voltage = esp_adc_cal_raw_to_voltage(adc_reading, adc_chars);
        //printf("Raw ADC Reading: %u\tVoltage: %umV\n", adc_reading, voltage);
        printf("Raw ADC Reading: %u\tVoltage: %umV\n", (unsigned int)adc_reading, (unsigned int)voltage);


}

void app_main() {
    initialize_adc(); // Initialize ADC
    while (1) {
        read_analog_voltage(); // Read analog voltage
        vTaskDelay(1000 / portTICK_PERIOD_MS); // Delay for 1 second
    }
}
